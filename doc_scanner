import cv2
import numpy as np


def resizeImage(img, ratio):
    colones, lines, colours = img.shape
    newSize = (int(lines * ratio / 100), int(colones * ratio / 100))
    newImg = cv2.resize(img, newSize)
    return newImg
print(cv2.__version__)



def filtererNonQuadrilaters(contours):
    result=[]
    for contour in contours:
        approx=cv2.approxPolyDP(contour,10,True)
        if (len(approx)==4):
            result.append(contour)
            return result








imageOriginale = cv2.imread("Attestation3.jpg")
ratio = 35
imgORiginaleResize = resizeImage(imageOriginale, ratio)
imgResizeToGray = cv2.cvtColor(imgORiginaleResize, cv2.COLOR_BGR2GRAY)
ThresholdMin = 100
ThresholdMax = 200
imgResizeToGrayBlur = cv2.GaussianBlur(imgResizeToGray, (5, 5), 0)
imagethreshold = cv2.Canny(imgResizeToGray, ThresholdMin, ThresholdMax)
cv2.imshow("imagethreshold", imagethreshold)
imagethresholdGrayBlur = cv2.Canny(imgResizeToGrayBlur, ThresholdMin, ThresholdMax)

kernel = np.ones((5,5))
ImgDilate = cv2.dilate(imagethreshold, kernel , iterations=2)
imagethresholdErode = cv2.erode(ImgDilate, kernel , iterations=2)

ContoursImg = imagethresholdErode.copy()
imgORiginaleResizeCountour=imgORiginaleResize.copy()
image,contours , hierarchy = cv2.findContours(ContoursImg , cv2.RETR_EXTERNAL , cv2.CHAIN_APPROX_NONE)
cv2.drawContours(imgORiginaleResizeCountour,contours,-1 ,(0,255,0),3)

contoursCondidats = filtererNonQuadrilaters(contours)
cv2.drawContours(imgORiginaleResizeCountour,contoursCondidats,-1 ,(0,0,255),2)


cv2.imshow("imgORiginaleResize", imgORiginaleResize)
cv2.imshow("imgResizeToGray", imgResizeToGray)
cv2.imshow("imgResizeToGrayBlur", imgResizeToGrayBlur)
cv2.imshow("imagethresholdGrayBlur", imagethresholdGrayBlur)
cv2.imshow("imgORiginaleResizeCountour" , imgORiginaleResizeCountour)
cv2.imshow("ImgDilate" , ImgDilate)
cv2.imshow("imagethresholdErode" , imagethresholdErode)



while True:
    key = cv2.waitKey(1)
    if key == 27: break
cv2.destroyAllWindows()
